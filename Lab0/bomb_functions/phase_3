00000000004007fc <phase_3>:
  4007fc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
  400800:	910003fd 	mov	x29, sp
  400804:	910063e3 	add	x3, sp, #0x18                                 //       x3
  400808:	910073e2 	add	x2, sp, #0x1c                                 //       x2
  40080c:	90000321 	adrp	x1, 464000 <free_mem+0x40>
  400810:	911f6021 	add	x1, x1, #0x7d8                                //       x1
  400814:	9400195b 	bl	406d80 <__isoc99_sscanf>                      //       sscanf(x0=str,x1="%d %d",x2,x3,...)
  400818:	7100081f 	cmp	w0, #0x2                                      //       x2, x3 = scanf's parameters address
  40081c:	54000161 	b.ne	400848 <phase_3+0x4c>  // b.any             //       if not 2 parameters in scanf, explode()
  400820:	b9401fe0 	ldr	w0, [sp, #28]                                 //       w0<-x2 
  400824:	7100101f 	cmp	w0, #0x4                                      //       if(w0==4)  0b100
  400828:	540002c0 	b.eq	400880 <phase_3+0x84>  // b.none            //          goto 0x84
  40082c:	71001c1f 	cmp	w0, #0x7                                      //       if(w0==7)  0b111
  400830:	54000360 	b.eq	40089c <phase_3+0xa0>  // b.none            //          goto 0xa0
  400834:	7100081f 	cmp	w0, #0x2                                      //       if(w0==2)  0b010
  400838:	540000c0 	b.eq	400850 <phase_3+0x54>  // b.none            //          goto 0x54
  40083c:	940000ad 	bl	400af0 <explode>                              //       explode()
  400840:	a8c27bfd 	ldp	x29, x30, [sp], #32                           //       return
  400844:	d65f03c0 	ret
  400848:	940000aa 	bl	400af0 <explode>
  40084c:	17fffff5 	b	400820 <phase_3+0x24>                           //
  400850:	b9401be2 	ldr	w2, [sp, #24]                                 //0x54:  w2 = *x3   (x2=0b010)
  400854:	528ccce0 	mov	w0, #0x6667                	// #26215         //       w0 = 0x00006667                     
  400858:	72acccc0 	movk	w0, #0x6666, lsl #16                        //       w0|= 0x66660000 (w0=0x66666667)
  40085c:	9b207c40 	smull	x0, w2, w0                                  //       x0=w2*w0
  400860:	9362fc00 	asr	x0, x0, #34                                   //       x0 >>= 34                          
  400864:	4b827c00 	sub	w0, w0, w2, asr #31                           //       w0 = w0 - (w2 >> 31)
  400868:	0b000801 	add	w1, w0, w0, lsl #2                            //       w1 = w0 + (w0 << 2)
  40086c:	4b010441 	sub	w1, w2, w1, lsl #1                            //       w1 = w2 - (w1 << 1)
  400870:	0b000020 	add	w0, w1, w0                                    //       w0 = w1 + w0
  400874:	7100081f 	cmp	w0, #0x2                                      //       if (w0==2)
  400878:	54fffe40 	b.eq	400840 <phase_3+0x44>  // b.none            //          return
  40087c:	9400009d 	bl	400af0 <explode>                              //       explode()
  400880:	b9401be0 	ldr	w0, [sp, #24]                                 //0x84:  w0 = *x3   (x2=0b100)
  400884:	4a800c00 	eor	w0, w0, w0, asr #3                            //       w0 = w0 ^ (w0 >> 3)
  400888:	12000800 	and	w0, w0, #0x7                                  //       w0 = w0 & 0b111
  40088c:	b9401fe1 	ldr	w1, [sp, #28]                                 //       w1 = *x2
  400890:	6b01001f 	cmp	w0, w1                                        //       if(w0==w1)
  400894:	54fffd60 	b.eq	400840 <phase_3+0x44>  // b.none            //          return
  400898:	94000096 	bl	400af0 <explode>                              //       explode()
  40089c:	b9401be0 	ldr	w0, [sp, #24]                                 //0xa0:  w0 = *x3   (x2=0b111)
  4008a0:	b9401fe1 	ldr	w1, [sp, #28]                                 //       w1 = *x2
  4008a4:	12000802 	and	w2, w0, #0x7                                  //       w2 = w0 & 0b111
  4008a8:	6b01005f 	cmp	w2, w1                                        //       if(w1==w2)
  4008ac:	54fffca0 	b.eq	400840 <phase_3+0x44>  // b.none            //          return
  4008b0:	d3431400 	ubfx	x0, x0, #3, #3                              //       x0 = (x0 >> 3) & 0b111
  4008b4:	6b00003f 	cmp	w1, w0                                        //       if(w1==w0)
  4008b8:	54fffc40 	b.eq	400840 <phase_3+0x44>  // b.none            //          return
  4008bc:	9400008d 	bl	400af0 <explode>                              //       explode()
  4008c0:	17ffffdf 	b	40083c <phase_3+0x40>